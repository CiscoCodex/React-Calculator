{"version":3,"sources":["logo.svg","serviceWorker.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Operator","props","className","onClick","operator","Calculate","i","this","renderOperator","React","Component","Value","value","Number","createTable","table","children","j","push","renderValue","Calculator","keyDownFunction","bind","state","input","firstOperand","solution","event","number","keyCode","setState","concat","document","addEventListener","removeEventListener","secondOperand","parseInt","output","calculateResult","handleNumberClick","handleOperatorClick","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iGAAAA,EAAOC,QAAU,IAA0B,kC,qMCYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZN,SAASC,EAASC,GAChB,OACE,4BAAQC,UAAU,kBAAkBC,QAASF,EAAME,SAChDF,EAAMG,U,IAKPC,E,6KACWC,GAAI,IAAD,OAChB,OACE,kBAACN,EAAD,CACEI,SAAUE,EACVH,QAAS,kBAAM,EAAKF,MAAME,QAAQG,Q,+BAKtC,OACE,6BACE,+BACE,4BACA,4BAAKC,KAAKC,eAAe,MACzB,4BAAKD,KAAKC,eAAe,MACzB,4BAAKD,KAAKC,eAAe,OAEzB,4BACA,4BAAKD,KAAKC,eAAe,MACzB,4BAAKD,KAAKC,eAAe,MACzB,4BAAKD,KAAKC,eAAe,a,GArBXC,IAAMC,WA6B9B,SAASC,EAAMV,GACb,OACE,4BAAQC,UAAU,gBAAgBC,QAASF,EAAME,SAC9CF,EAAMW,O,IAKPC,E,4MASFC,YAAc,WAIZ,IAHA,IAAIC,EAAO,GAGFT,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAG1B,IAFA,IAAIU,EAAW,GAENC,EAAI,EAAGA,EAAI,EAAGA,IACrBD,EAASE,KAAK,4BAAK,EAAKC,YAAYF,EAAK,EAAIX,KAI/CS,EAAMG,KAAK,4BAAKF,IAElB,OAAOD,G,0DAtBGT,GAAI,IAAD,OACb,OACE,kBAACK,EAAD,CACEC,MAAON,EACPH,QAAS,kBAAM,EAAKF,MAAME,QAAQG,Q,+BAsBtC,OACI,6BACE,+BACGC,KAAKO,oB,GA9BCL,IAAMC,WAqCrBU,E,kDAEJ,WAAYnB,GAAQ,IAAD,8BACjB,cAAMA,IACDoB,gBAAkB,EAAKA,gBAAgBC,KAArB,gBACvB,EAAKC,MAAQ,CACXC,MAAO,GACPC,aAAc,KACdC,SAAU,KACVtB,SAAU,IAPK,E,4DAWHuB,GACd,IAAIC,EAASD,EAAME,QAAU,GACzBD,GAAU,GAAKA,GAAU,GAC3BrB,KAAKuB,SAAS,CAAEN,MAAOjB,KAAKgB,MAAMC,MAAMO,OAAOH,O,0CAKjDI,SAASC,iBAAiB,UAAW1B,KAAKc,iBAAiB,K,6CAG3DW,SAASE,oBAAoB,UAAW3B,KAAKc,iBAAiB,K,sCAGhDI,EAAcrB,EAAU+B,GACtC,OAAO/B,GACL,IAAK,IACH,OAAOgC,SAASX,GAAgBW,SAASD,GAE3C,IAAK,IACH,OAAOC,SAASX,GAAgBW,SAASD,GAE3C,IAAK,IACH,OAAOC,SAASX,GAAgBW,SAASD,GAE3C,IAAK,IACH,OAAOC,SAASX,GAAgBW,SAASD,GAE3C,IAAK,IACH,OAAOC,SAASX,GAAgBW,SAASD,GAG7C,OAAO/B,I,wCAGSE,GAChBC,KAAKuB,SAAS,CACZN,MAAOjB,KAAKgB,MAAMC,MAAMO,OAAOzB,GAC/BoB,SAAU,S,0CAIMpB,GAClB,GAA+B,MAA3BC,KAAKgB,MAAME,aACblB,KAAKuB,SAAS,CACZL,aAAclB,KAAKgB,MAAMC,MACzBA,MAAO,GACPE,SAAU,KACVtB,SAAUE,QAGT,CACH,IAAI+B,EAAS9B,KAAKgB,MAAME,aAAe,IAAMlB,KAAKgB,MAAMnB,SAAW,IAAMG,KAAKgB,MAAMC,MAAQ,MAC5FjB,KAAK+B,gBAAgB/B,KAAKgB,MAAME,aAAclB,KAAKgB,MAAMnB,SAAUG,KAAKgB,MAAMC,OAC9EjB,KAAKuB,SAAS,CACZJ,SAAUW,EACVb,MAAO,GACPC,aAAc,U,+BAKV,IAAD,OACP,OACE,6BACE,6BACE,qDAEF,yBAAKvB,UAAU,mBACb,6BACA,kBAAC,EAAD,CAAQC,QAAS,SAAAG,GAAC,OAAI,EAAKiC,kBAAkBjC,OAE7C,6BACA,kBAAC,EAAD,CAAWH,QAAS,SAAAG,GAAC,OAAI,EAAKkC,oBAAoBlC,OAElD,yBAAKJ,UAAU,YACZK,KAAKgB,MAAMC,MACXjB,KAAKgB,MAAMG,gB,GA1FCjB,IAAMC,WAkG/B+B,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFX,SAASY,eAAe,SD3DpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.45b26a0e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nfunction Operator(props) {\n  return (\n    <button className=\"button-operator\" onClick={props.onClick}>\n      {props.operator}\n    </button>\n  )\n}\n\nclass Calculate extends React.Component {\n  renderOperator(i) {\n    return(\n      <Operator\n        operator={i}\n        onClick={() => this.props.onClick(i)}/>\n    );\n  }\n\n  render() {\n    return(\n      <div>\n        <table>\n          <tr>\n          <td>{this.renderOperator(\"-\")}</td>\n          <td>{this.renderOperator(\"+\")}</td>\n          <td>{this.renderOperator(\"%\")}</td>\n          </tr>\n          <tr>\n          <td>{this.renderOperator(\"*\")}</td>\n          <td>{this.renderOperator(\"/\")}</td>\n          <td>{this.renderOperator(\"=\")}</td>\n          </tr>\n        </table>\n      </div>\n    );\n  }\n}\n\nfunction Value(props) {\n  return (\n    <button className=\"button-number\" onClick={props.onClick}>\n      {props.value}\n    </button>\n  )\n}\n\nclass Number extends React.Component {\n    renderValue(i) {\n      return(\n        <Value\n          value={i}\n          onClick={() => this.props.onClick(i)}/>\n      );\n    }\n\n    createTable = () => {\n      let table =[]\n\n      // Outer loopto create parent\n      for (let i = 0; i < 3; i++) {\n        let children = []\n        // Inner loop to create children\n        for (let j = 1; j < 4; j++) {\n          children.push(<td>{this.renderValue(j + (3 * i))}</td>)\n        }\n\n        // Create the parent and add the children\n        table.push(<tr>{children}</tr>)\n      }\n      return table\n    }\n\n    render() {\n      return (\n          <div>\n            <table>\n              {this.createTable()}\n            </table>\n          </div>\n      );\n    }\n}\n\nclass Calculator extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.keyDownFunction = this.keyDownFunction.bind(this);\n    this.state = {\n      input: \"\",\n      firstOperand: null,\n      solution: null,\n      operator: \"\"\n    }\n  }\n\n  keyDownFunction(event) {\n    var number = event.keyCode - 48;\n    if (number >= 0 && number <= 9) {\n      this.setState({ input: this.state.input.concat(number)});\n    }\n  }\n\n  componentDidMount() {\n    document.addEventListener(\"keydown\", this.keyDownFunction, false);\n  }\n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.keyDownFunction, false);\n  }\n\n  calculateResult(firstOperand, operator, secondOperand) {\n    switch(operator) {\n      case \"+\":\n        return parseInt(firstOperand) + parseInt(secondOperand);\n        break;\n      case \"-\":\n        return parseInt(firstOperand) - parseInt(secondOperand);\n        break;\n      case \"*\":\n        return parseInt(firstOperand) * parseInt(secondOperand);\n        break;\n      case \"/\":\n        return parseInt(firstOperand) / parseInt(secondOperand);\n        break;\n      case \"%\":\n        return parseInt(firstOperand) % parseInt(secondOperand);\n        break;\n    }\n    return operator;\n  }\n\n  handleNumberClick(i) {\n    this.setState({\n      input: this.state.input.concat(i),\n      solution: null\n    });\n  }\n\n  handleOperatorClick(i) {\n    if (this.state.firstOperand == null) {\n      this.setState({ \n        firstOperand: this.state.input,\n        input: \"\",\n        solution: null,\n        operator: i\n      });\n    }\n    else {\n      let output = this.state.firstOperand + \" \" + this.state.operator + \" \" + this.state.input + \" = \" +\n      this.calculateResult(this.state.firstOperand, this.state.operator, this.state.input);\n      this.setState({\n        solution: output,\n        input: \"\",\n        firstOperand: null\n      });\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <div>\n          <h1>React Calculator App</h1>\n        </div>\n        <div className=\"calculator-body\">\n          <div>\n          <Number onClick={i => this.handleNumberClick(i)}/>\n          </div>\n          <div>\n          <Calculate onClick={i => this.handleOperatorClick(i)}/>\n          </div>\n          <div className=\"solution\">\n            {this.state.input}\n            {this.state.solution}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <Calculator />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}